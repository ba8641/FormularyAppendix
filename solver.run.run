/*	07.05.2017
 	ABP_FL_test.run (script file) used to determine the optimal vaccine production, 
 	procurement allocations, and the range of vaccine prices that maximize TSS 
 	for multiple problem instances

	############################################################################        
	# This is a MAJOR UPDATE to ABP_L_test.run (02.10.17). This script must    #
	# call all ABP model elements, definitions, and heuristics as well as the  #
	# data files. 							                                   #
	############################################################################

	by Ruben A. Proano
	rpmeie@rit.edu
	ROCHESTER INSTITUTE OF TECHNOLOGY
	
	NOTE:
	# 1- This script sequentially determines
		a) vaccine procurement allocation and vaccines to produce that maximizes 
		   TSS
		b) the range of vaccine prices that mantain TSS and maximize TCS for the
		   procurement allocation
		c) the range of vaccine prices that maintain TSS and maximize TPF for 
		   the procurement allocation
		   
	 2- Major differences between ABP_L_test.run (2.10.17) and ABP_FL_test.run:
	    a) ABP_FL_test.run allows the opportunity to solve the vaccine allocation 
	       problem using the ABPFLTSS problem definition, which FULLY linearizes 
	       the ABP allocation model, via the implementation of the McCormick 
	       envelope linearization constraints
	    b) ABP_FL_test.run allows for a better handling of infeasibilities of
	       bundle allocations for the ABPTCS and ABPTPF problems. This procedure
	       is managed by iteratively identifying and dropping a constraint in the 
	       (irreducible infeasible set of constraints) until an allocation becomes
	       feasible to a relaxed ABPTCS and ABPTPF. 
	    c) ABP_FL_test.run sets to 0 all bundle prices corresponding to
	       allocations that are too small (X[b,m]<=0.1). This facilitates reading
	       and ensures that if a bundle is not offered in a market the 
	       the allocation and its low and up prices are zero.
        d) ABP_FL_test.run prints which constraints were relaxed for each
           experimental instance if the relaxation was needed
        e) Changes in the display of summary statistics for each experiment
        f) This scripts allows for the use of 'theta' the fraction that permits
           define the price at which no demand for a bundle exists as 
           theta*R[b,m]
        g) Eliminates 'tottime' parameter used to track solution times 

	 2- Make sure that ABP_FL.mod and ABP_L_problem_def.mod (July 2017 versions)
	    are loaded. These versions include constraints and problem definitions 
	    that allow a complete linearization of the ReturnAnnuity constraint

	 3- The script reads from an input file 'ExpFileDetails' (it could be any 
	    file) the number of problem instances to solve for, their names, and the 
	    paths for: the source code (model elements,  problem definitions, 
	    heuristic ), for the data files, and where to save output files
	
	07.05.2017

	07.11.2017 - Added support to the model with multiple entities.

	version I.01

	See additional comments at the end of the file
*/

param DeficitE{e in 1..100, m in M, a in A};	#Shows the DeficitE of each antigen in each market
param DeficitTE{e in 1..100, m in M, a in A} default -1;	#Shows the DeficitE of each antigen in each market
param numTargets{i in 1..NumExp} default 0;

reset data Countries, n_entities, annual_births, interest_rate, uncertainty_low, uncertainty_high, alpha, T, C, E, D, HI, LO, R, S, Xo, bfit, bkpt, d, dH, gni_p, go, hii, k, l, loo, n_antigens, n_bundles, n_linsegments, n_markets, n_producers, name, numiterations, phi, theta, rate, A, A1, B, B1, B2, Bsort, LL, M, N, P, Q, QQ, temps, Xlow, Xup, Ylow, Yup, WOri, WSat, minPrice;

data (PathIn & ExpName[1]);	#Forces the first entity's data to be loaded.

param TempS{b in B};	#Variable that stores the capacity before resetting the problem.

let {b in B} TempS[b] := S[b];
param Allocation{1..n_entities, B, M};	#Variable that stores X*R for each entity.
param EntName{ent in 1..n_entities} symbolic;
param pop{1..194};
param inc{1..194};
param RP{b in B, 1..194} default 0;
param O2{M};
param OM2{M,P};


#model (Source &"Form_v4.mod");



/* Printing headers of summary file for experiments performed with the script, adjusted to be displayed in Excel with ' ' as a separator */

#	print 'Weekday', 'Month', 'Day', 'Time', 'Year', "ExpName[i]", "card(tot_iis_indices)", "TotTSS", "TotTCS", "TotTPF", "_total_solve_elapsed_time", "_total_solve_system_time", "_total_solve_user_time", "_total_solve_time" , {p in P} 'High_Price_profit_for_P' & p, {b in B} 'High_Price_profit_for_B' & b, {p in P} 'Low_Price_profit_for_P' & p, {b in B} 'Low_Price_profit_for_B' & b, {b in B} 'Leftover_for_B' & b >> (PathOut & "sum_performance.txt");
#print "Week", "Month", "Day", "Time", "Year", "ExpName[i]", "card(tot_iis_indices)", "TotTSS",
# "TotTCS", "TotTPF", "_total_solve_elapsed_time", "_total_solve_system_time", 
# "_total_solve_user_time", "_total_solve_time", "TotTCSL", "MV", "TTCS/TCS", 
# "RelDeficit_HP_P", 
# "#_of_producers_with_more_than_100_loss_with_high_prices", 
# "#_of_producers_with_more_than_100_loss_with_low_prices", 
# "#_of_bundles_with_more_than_100_loss_with_high_prices", 
# "#_of_bundles_with_more_than_100_loss_with_low_prices", 
# "#_of_cases_of_antigen_deficit_in_any_market/_entity_or_antigen_greater_than_100", 
# "#_of_producers_whose_profit_deficit_is_more_than_10%_with_high_prices", 
# {p in P} "%_of_loss_with_high_prices_for_producer" & p, 
# "#_of_producers_whose_profit_deficit_is_more_than_10%_with_low_prices", 
# "Number_of_antigen_deficit_cases_in_target_markets_divided_by_the_number_of_target_markets_times_the_number_of_antigens_they_need",
# "Number_of_antigen_deficit_in_target_markets_for_all_entities/_markets_and_entities", 
# "TotTCSLM", "TotTCSHM", "TotTCSH",
# "TotTPFL", "TotTPFLM", "TotTPFHM", "TotTPFH" > (PathOut & "sum_performance.txt");
print "Week", "Month", "Day", "Time", "Year", "Model", "Market", "Factors", "ExpName[i]", "Alpha", "card(tot_iis_indices)", "Price", "TSS", 
"TCS", "TPF", "MV", "CSL", "CSLM", "CSUM", "CSH", "PL", "PLM", "PUM", "PH", 
{b in B} "g[" & b & "]", "sigma", {a in A}"sum_X[b,m]-sum_dem["&a&"]", 
{m in M, a in A}"sum_X[b,"&m&"]-dem["&a&","&m&"]" > (PathOut & "sum_performance.txt");

for {i in 1..NumExp}{ read num_E[i],{j in 1..num_E[i]}ExName[i,j] < "EntFileDetailsTestFL.txt";};

/* Soving ABP with the heuristic, and then using the resulting allocation as 
   input to ABPTCS and ABPTPF. The three-stage loop is done for each of the 
   experiments to be tested */

#for {mult in 1..20}{

let alpha:= 1;
#let alpha := mult/10;
for {exp in 1..NumExp}{

let TotTSS:=0;
let TotTCS := 0;
let TotTCSL:=0;
let TotTCSLM:=0;
let TotTCSHM:=0;
let TotTCSH:=0;
let TotTPF:=0;
let TotTPFL:=0;
let TotTPFLM:=0;
let TotTPFHM:=0;
let TotTPFH:=0;

let TCS_HP := 0;
	let TPF_LP := 0;
	let TCSL_LP := 0;
	let TCSLM_LP := 0; 
	let TCSHM_LP := 0;
	let TCSH_LP := 0;
	let TPFL_LP := 0;
	let TPFLM_LP := 0;
	let TPFHM_LP := 0;
	let TPFH_LP := 0;
let tottime:=0;
let {b in B} producing[b]:=0;
reset data D, d, gni_p, R, l, n_entities, EntName;
#if exp <> 2493 and exp <> 3808 and exp <> 3731 and exp<> 3654 and exp <> 3578 and exp <> 3501 and exp <> 3424 and exp <> 3347 and exp<>3270 and exp <> 3193 and exp <> 3116 and exp <> 3037 and exp <>2970 and exp <> 2902 and exp <> 2833 and exp <> 2765 and exp <>2697 and exp <> 2629 and exp <> 2561 and exp <> 2424 and exp <> 2356 and exp<> 2010 and exp <>2220 and exp <>2288 and exp <>2152 and exp<>2083 and exp <> 1808 and exp <> 1909 and exp <> 1707 and exp<> 1606 and exp <> 1505 and exp <> 1404 and exp <> 1303 and exp <> 1203 and exp <> 1101 and exp <> 987 and exp <> 889 and exp <> 790 and exp <> 692 and exp <> 594 and exp <> 100 and exp <> 199 and exp <>298 and exp <>397 and exp <>495 then {read n_entities, {i in 1..n_entities}EntName[i] < EntFileDetailsTestFL.txt;};
let n_entities:= num_E[exp];
let {i in 1..n_entities}EntName[i] := ExName[exp,i]; 
close ("EntFileDetailsTestFL.txt");
if exp > 0 then {
let {i in 1..194} pop[i]:=0;
let {i in 1..194} inc[i]:=0;
let curMarket := 0;
let order:=0;


reset data OM2, TempS, DeficitE, DeficitTE, Allocation, X2, TotalProfit_h, TotalProfit_l, numTargets;
for{ i in 1..n_entities}
{
	#update data;
	
	reset data Countries, annual_births, interest_rate, uncertainty_low, uncertainty_high, alpha,
	 T, C,D, HI, LO, R, S, Xo, bfit, bkpt, d, dH, gni_p, go, hii, k, l, loo, n_antigens, 
	 n_bundles, n_linsegments, n_markets, n_producers, name, numiterations, phi, theta, rate, A, 
	 A1, B, B1, B2, Bsort, LL, M, N, P, Q, QQ, temps, Xlow, Xup, Ylow, Yup, WOri, WSat, minPrice, 
	 targetGNI, YHigh, YLow;
	#let M:= 1..(num(substr(EntName[i], match(EntName[i],'m')+1, match(EntName[i],'_ul')-match(EntName[i],'m')-1))/n_entities);
	let M_DROP:= (num(substr(EntName[i], match(EntName[i],'m')+1, match(EntName[i],'_ul')-match(EntName[i],'m')-1))/n_entities +1)..194;
	if num(substr(EntName[i], match(EntName[i],'_-')+2, match(EntName[i],'-'&n_entities&'_e')-match(EntName[i],'_-')-2))
	< curMarket then {let order := 1;}
	let curMarket := num(substr(EntName[i], match(EntName[i],'_-')+2, match(EntName[i],'-'&n_entities&'_e')-match(EntName[i],'_-')-2));
	display curMarket;
	display order;
	
	
	display ("Solving----" & EntName[i]); 
	

	data (PathIn & EntName[i]);
	let targetGNI:= 1045;
	
	
	for {b in B}{
		let RA[b]:= (sum{m in M}(R[b,m]*l[m])) / (sum{m in M}l[m]);
	};
	#for {a in A}{
	#	let dA[a] := sum{m in M} d[a,m]*l[m];
	#};
	
	#let {m in M} pop[(i-1)*card(M)+m] := l[m];
	#let {m in M} inc[(i-1)*card(M)+m] :=gni_p[m];
	#let {m in M, b in B} RP[b,(i-1)*card(M)+m] :=R[b,m];
	
	let WSat:= 10e6;
	#let {b in B}T[b] := {m in M};
	let targetGNI:= 1045;
	let {b in B}minPrice[b] := .2;
	#let alpha := 1;
	let alpha := mult/10;
	#let {m in M, b in B: R[b,m]<.2} R[b,m]:=.2;
	let numTargets[exp] := numTargets[exp] + count{m in M}(gni_p[m]<targetGNI);
	#for {m in M, b in B, q in Q[b]: card(Q[b])>=1} {if R[b,m]< sum{t in N[q]}R[t,m] then{let R[b,m] := sum{t in N[q]}R[t,m]};};
	if i >1 then {let {b in B} S[b] := TempS[b];}
	else {let {b in B} TempS[b] := S[b];};	# Uses the stored capacity for the new run;
	
	let PathDrop:= (PathOut & "DropConst/" & EntName[1] & "_");
	print "" > (PathDrop & "drop.out");
	
	include Separate.run;
	#display OM;
	let TotTSS := TotTSS + sum{b in B, m in M}X[b,m]*R[b,m];
	let TotTPFL := TotTPFL + sum{m in M, p in P: gni_p[m] <= targetGNI}(OM[m,p]);
	let TotTPFLM := TotTPFLM + sum{m in M, p in P: gni_p[m] > targetGNI and gni_p[m] < lmGNI}(OM[m,p]);
	let TotTPFHM := TotTPFHM + sum{m in M, p in P: gni_p[m] > lmGNI and gni_p[m] <= hmGNI}(OM[m,p]);
	let TotTPFH := TotTPFH + sum{m in M, p in P: gni_p[m] > hmGNI}(OM[m,p]);
	let {b in B} TempS[b] := S[b] - sum{m in M}X[b,m];
	
	

}
if n_entities == 1 then {
	let mode := "Benchmark";
}else{
	let mode := "Invariant";
}

let factor := "";
if order == 1 then{
	for {i in 1..(n_entities-1)}{let factor := factor&(n_entities+1-i)&",";};
	let factor := factor&'1';
}else{
for {i in 1..(n_entities-1)}{let factor := factor&i&",";};
let factor := factor&n_entities;
}
#close (PathDrop & "drop.out");
#let {b in B} F[b] := sum{p in P} FM[b,p];
let TotTSS := TotTSS - sum{b in B} ga[b]*C[b];
let TPF_LP := TPF_LP - sum{b in B} ga[b]*C[b];
let TotTPF := TotTPF - sum{b in B} ga[b]*C[b];
print ctime(), mode, num(substr(ExpName[exp], match(ExpName[exp],'m')+1, match(ExpName[exp],'_ul')-match(ExpName[exp],'m')-1)),
 factor, ExpName[exp], alpha, card(tot_iis_indices), "High", TotTSS, TCS_HP, TotTPF, 
TotTCS+TotTPF, TCSL_LP, TCSLM_LP, TCSHM_LP, TCSH_LP, TotTPFL, TotTPFLM, TotTPFHM, 
TotTPFH, {b in B} ga[b], sigma, 
{a in A}sum{m in M, b in B1[a]}X[b,m]-sum{m in M}(d[a,m]*l[m]), 
{m in M, a in A}sum{b in B1[a]}X[b,m]-d[a,m]*l[m], 
{m in M, p in P} OM[m,p]-OM2[m,p] >> (PathOut & "sum_performance.txt");

let TotTSS := TotTSS - sum{b in B} ga[b]*C[b];
print ctime(), mode, num(substr(ExpName[exp], match(ExpName[exp],'m')+1, match(ExpName[exp],'_ul')-match(ExpName[exp],'m')-1)),
 factor, ExpName[exp], alpha, card(tot_iis_indices), "Low", TotTSS, TotTCS, TPF_LP, 
TotTCS+TotTPF, TotTCSL, TotTCSLM, TotTCSHM, TotTCSH, TPFL_LP, TPFLM_LP, TPFHM_LP, 
TPFH_LP, {b in B} ga[b], sigma, 
{a in A}sum{m in M, b in B1[a]}X[b,m]-sum{m in M}(d[a,m]*l[m]), 
{m in M, a in A}sum{b in B1[a]}X[b,m]-d[a,m]*l[m], 
{m in M, p in P} OM[m,p]-OM2[m,p] >> (PathOut & "sum_performance.txt");


/*print ctime(), ExpName[exp], card(tot_iis_indices), TotTSS, TotTCS, TotTPF, _total_solve_elapsed_time, _total_solve_system_time, _total_solve_user_time, _total_solve_time, TotTCSL, 
(TotTCS+TotTPF), (TotTCSL/(1e-10+TotTCS)), 
(sum{p in P: TotalProfit_h[p] < 0} -TotalProfit_h[p]/(sum{b in B:k[b]==p}(C[b]*producing[b])))/card{P}, count{p in P}(TotalProfit_h[p]<-100), 
count{p in P} (sum{b in B:k[b]==p}(sum{m in M}(X[b,m]*YLow[b,m])-C[b]*g[b])<-100), count{b in B} (sum{m in M}(X[b,m]*YHigh[b,m])-C[b]*g[b]<-100), 
count{b in B} (sum{m in M}(X[b,m]*YLow[b,m])-C[b]*g[b] < -100), count{m in M, a in A,i in 1..n_entities} (DeficitE[i,m,a]>100), 
((sum{p in P, b in B:k[b]==p and g[b] ==1 and C[b] - sum{m in M}(X[b,m]*YHigh[b,m]) > 0}(C[b] - sum{m in M}(X[b,m]*YHigh[b,m])))/(1e-10+sum{p in P, b in B:k[b]==p and g[b] ==1}C[b])>.1), 
count{p in P} ((sum{b in B:k[b]==p and g[b] ==1}(C[b] - sum{m in M}(X[b,m]*YLow[b,m])))/(1e-10+sum{b in B:k[b]==p and g[b] ==1}C[b])>.1),  
(sum{a in A, m in M, i in 1..n_entities: DeficitTE[i,m,a]>0} (DeficitTE[i,m,a]) / (numTargets[exp]*card(A))), 
count{a in A, m in M, i in 1..n_entities} (DeficitTE[i,m,a]>0), TotTCSLM, TotTCSHM, TotTCSH, TotTPFL, TotTPFLM, TotTPFHM, TotTPFH >> (PathOut & "sum_performance.txt");*/
#Deficit is divided by count of all entities, rather than those with deficit.	# Assumes all entities have the same number of target markets
};
};
close (PathOut & "sum_performance.txt");
}


#display sum{i in 1..n_entities, b in B, m in M}Allocation[i,b,m];

end;

/* 

Use this script in conjunction with a file 
ExpFileDetails.txt that contains the instructions below. Feel free to change
the paths for your source, input, and output folders according to your needs.
The ABP_FL_test.run and the ExpFileDetailsTest.txt should saved in the same folder. 
To execute the ABP_FL_test.run, first make its directory a working directory
in your terminal and simply type "ampl ABP_FL_test.run" in the shell (linux)
----------------------------

2		    # number of problem instances
test1		# name of data file for first problem instance
test2		# name of data file for second problem instance
"/shared/kgcoe-research/gates/SOURCES/ABPModular/"	                    # path to folder with Source code
"/shared/kgcoe-research/gates/Testfiles/ABPModular/DataInstances/"	    # path to folder with Input data files
"/shared/kgcoe-research/gates/Testfiles/ABPModular/OutputInstances/"	# path to folder storing Output results 
----------------------------

*/



