reset;
param num_ent:=4;
param Source symbolic := "";
param output symbolic := "/shared/kgcoe-research/gates/Bruno/ABP_ME_Constraint/Output/";
param printing symbolic;
param n_markets  >=0;
model (Source &"ABP_base.mod");
model (Source &"ABP_L_H.mod");
model (Source &"ABP_ME.mod");
model ABP_Distribution_v2.mod;
model (Source &"ABP_L_problem_def.mod");
#let M := 1..n_markets;

	param YLow{b in B, m in M};
	param YHigh{b in B, m in M};
	param TotTSS default 0;
	param TotTCS default 0;
	param TotTPF default 0;
	param TotTCST default 0;	#Target markets
	param TotTCSLM default 0;	#LM income
	param TotTCSHM default 0;	#HM income
	param TotTCSH default 0;	#High income
	param TotTPFT default 0;
	param TotTPFLM default 0;
	param TotTPFHM default 0;
	param TotTPFH default 0;
	param Deficit{m in M, a in A};	#Shows the deficit of each antigen in each market
	param DeficitT{m in M, a in A} default -1;	#Shows the deficit of each antigen in each market


	param TotalProfit_h{p in P} default 0;	#Total profit across all entities per manufacturer with high prices;
	param TotalProfit_l{p in P} default 0;	#Total profit across all entities per manufacturer with low prices;
	param BundleProfit_h{b in B} default 0;	#Total profit across all entities per bundle with high prices;
	param BundleProfit_l{b in B} default 0;	#Total profit across all entities per bundle with low prices;
param uncertainty_low;
param uncertainty_high;
param interest_rate;
param annual_births{1..194};
param Countries{1..2, 1..194};

for {j in 1..50}{
	reset data;
	data ("/shared/kgcoe-research/gates/Bruno/ABP_ME_Constraint/DataIn/Test_m12_ul1.0_uh1.1_i1.1_-1-1_e" & j & ".dat");

	let M := 1..n_markets;
	
	solve DistributionE;
	
	for {i in 1..num_ent}{
		print "param n_antigens := " & n_antigens &";" > (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param n_markets := " & card{m in M: Z[m] == i} &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		#print "param n_markets := " & card{m in M: Z[i,m] == 1} &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param uncertainty_low := " & uncertainty_low &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param uncertainty_high := " & uncertainty_high &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param interest_rate := " & interest_rate &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param n_linsegments := " & n_linsegments &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param n_bundles := " & n_bundles &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param n_producers := " & n_producers &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "set M := " >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print {m in M: Z[m] == i}(m & " ") >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		#print {m in M: Z[i,m] == 1}(m & " ") >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "set A := " >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print {a in A}a >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		for {b in B}{
			print "set A1[" & b &"] := " >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print {a in A1[b]}a >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		
		for {a in A}{
			print "set B1[" & a &"] := " >> ("Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print {b in B1[a]}b >> ("Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print ";" >> ("Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		};
		
		for {p in P}{
			print "set B2[" & p &"] := " >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print {b in B2[p]}b >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		
		for {b in B:card(Q[b])>0}{
			print "set Q[" & b &"] := " >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print {q in Q[b]}q >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		
		for {b2 in B}{
			for {q in Q[b2]}{
				print "set N[" & q &"] := " >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
				print {b in N[q]}b >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
				print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			};
		};
		
		print "param: S	k	name	:=" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		for {b in B}{
			print b	&"	"&	S[b] &"	"&k[b]&"	"&name[b]>> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "param phi:= " & phi &";">> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param theta := " & theta &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param WOri := " & WOri &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param WSat := " & WSat &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		print "param targetGNI := " & targetGNI &";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "param:	gni_p	l	:=" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		for {m in M:Z[m] == i}{
		#for {m in M: Z[i,m]==1}{
			print m &"	"&gni_p[m]&"	"&l[m]>> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "param C :=" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		for {b in B}{
			print b &"	"&C[b] >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "param R	:" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		let printing := "";
		for {m in M: Z[m] == i}{
		#for {m in M: Z[i,m]==1}{
			let printing := printing & m & " ";
		};
		let printing := printing & " :=";
		print printing >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		let printing := "";
		for {b in B}{
			let printing := b & " ";
			for {m in M:Z[m]==i}{
			#for {m in M: Z[i,m]==1}{
				let printing := printing & R[b,m] & " ";
			};
			print printing >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "param D	:" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		let printing := "";
		for {m in M: Z[m] == i}{
		#for {m in M: Z[i,m]==1}{
			let printing := printing & m & " ";
		};
		let printing := printing & " :=";
		print printing >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		for {b in B}{
			let printing := b & " ";
			for {m in M:Z[m]==i}{
			#for {m in M: Z[i,m]==1}{
				let printing := printing & D[b,m] & " ";
			};
			print printing >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "param d	:" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		let printing := "";
		for {m in M: Z[m] == i}{
		#for {m in M: Z[i,m]==1}{
			let printing := printing & m & " ";
		};
		let printing := printing & " :=";
		print printing >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		let printing := "";
		for {a in A}{
			let printing := a & " ";
			for {m in M:Z[m]==i}{
			#for {m in M: Z[i,m]==1}{
				let printing := printing & d[a,m] & " ";
			};
			print printing >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		for {b in B}{
			print "set T[" & b & "]:=" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print {m in M:Z[m]==i}m >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			#print {m in M:Z[i,m]==1}m >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
			print ";" >> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		};
		print "set	B1[1]	:= 1 2 3 4 5 32 33 34 35 36 37 38 41 42 43 44 45 46 47 48 49 50 51 52	;">> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "set	B1[2]	:= 6 7 8 9 10 11 12 13 32 33 34 39 41 42 43 44 45 46 47 48 49 51 52 	;">> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "set	B1[3]	:= 14 15 16 17 18 19 35 36 37 39 41 42 43 44 45 46 47 48 50 51 52		;">> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "set	B1[4]	:= 20 21 22 23 24 38 49 50 51 52; ">> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "set	B1[5]	:= 25 26 27 28 40;">> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
		
		print "set	B1[6]	:= 29 30 31 40	;">> (output & "Test_m12_ul1.0_h1.1_i1.1_-" & i & "-" & num_ent & "e" & j & ".dat");
	};
	
}

